{"version":3,"sources":["components/home.jsx","components/about.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","id","className","data-ride","data-target","data-slide-to","React","Component","About","App","basename","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAkDeA,E,iLA9CX,OAAO,yBAAKC,GAAG,QACb,yBAAKA,GAAG,aAAaC,UAAU,iBAAiBC,YAAU,YAExD,yBAAKD,UAAU,iBAAiBD,GAAG,qBACjC,yBAAKC,UAAU,eACb,yBAAKD,GAAG,YACN,0BAAMC,UAAU,uBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,qBAAhB,KACA,wCACA,0BAAMA,UAAU,qBAAhB,MACA,uCACA,0BAAMA,UAAU,uBAAhB,MACA,oCACA,uCACA,0BAAMA,UAAU,qBAAhB,MACA,0BAAMA,UAAU,wBAAhB,MACA,0BAAMA,UAAU,qBAAhB,OAEF,uBAAGA,UAAU,iBAAb,2EAEF,yBAAKA,UAAU,OAAOD,GAAG,WACvB,4CACA,uBAAGC,UAAU,iBAAb,2KAIF,yBAAKA,UAAU,OAAOD,GAAG,cACvB,+CACA,uBAAGC,UAAU,iBAAb,yKAKJ,wBAAIA,UAAU,uBACZ,wBAAIE,cAAY,cAAcC,gBAAc,IAAIH,UAAU,WAC1D,wBAAIE,cAAY,cAAcC,gBAAc,MAC5C,wBAAID,cAAY,cAAcC,gBAAc,a,GAvCnCC,IAAMC,WCeVC,E,iLAbX,OACI,6BACE,mCACA,iFACA,6BADA,2D,GALUD,aCiCLE,MA7Bf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAU,KACpB,yBAAKR,UAAU,OACb,gCACE,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CAAMS,GAAG,IAAIT,UAAU,YACpB,IADH,OAEO,KAEP,kBAAC,IAAD,CAAMS,GAAG,SAAST,UAAU,YAA5B,YAON,0BAAMA,UAAU,kBACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAM,IAAKC,UAAWd,IACnC,kBAAC,IAAD,CAAOa,KAAM,SAAUC,UAAWN,SCf1BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85e0c2a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return <div id=\"test\">\r\n      <div id=\"myCarousel\" className=\"carousel slide\" data-ride=\"carousel\">\r\n\r\n        <div className=\"carousel-inner\" id=\"carouselContainer\">\r\n          <div className=\"item active\">\r\n            <div id=\"isaIntro\">\r\n              <span className=\"rotate-animation-45\">H</span>\r\n              <span className=\"falling-animation-3s\">E</span>\r\n              <span className=\"swap-animation-3s\">Y</span>\r\n              <span>, &nbsp;</span>\r\n              <span className=\"jump-animation-5s\"> I</span>\r\n              <span>&nbsp; </span>\r\n              <span className=\"rotate-animation-20\"> A</span>\r\n              <span> M</span>\r\n              <span> &nbsp;</span>\r\n              <span className=\"jump-animation-3s\"> I</span>\r\n              <span className=\"falling-animation-5s\"> S</span>\r\n              <span className=\"swap-animation-5s\"> A</span>\r\n            </div>\r\n            <p className=\"carousel-text\">I'm a web developer currently working @ Oracle in Guadalajara, Mexico.</p>\r\n          </div>\r\n          <div className=\"item\" id=\"isaWork\">\r\n            <h1> WHAT I DO  </h1>\r\n            <p className=\"carousel-text\"> I work as a Frontend Developer in my team and play the Scrum Master role in our scrum sesions.\r\n            I am sometimes required to help with the Backend and automated tests. </p>\r\n          </div>\r\n\r\n          <div className=\"item\" id=\"isaHobbies\">\r\n            <h1 > I LOVE TO MIX </h1>\r\n            <p className=\"carousel-text\">I love how technology and design combined can create such extraordinary projects\r\n          and how interesting is all the logistics behind the making of an amazing project. </p>\r\n          </div>\r\n\r\n        </div>\r\n        <ol className=\"carousel-indicators\">\r\n          <li data-target=\"#myCarousel\" data-slide-to=\"0\" className=\"active\"></li>\r\n          <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\r\n          <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\r\n        </ol>\r\n\r\n      </div>\r\n\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Hey</h2>\r\n          <p>If you are watching this, thank you for passing by. \r\n          <br>  \r\n          </br>\r\n           Im still working on content to be a great for you!\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport Home from \"./components/home.jsx\";\r\nimport About from \"./components/about.jsx\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter basename={'/'}>\r\n      <div className=\"App\">\r\n        <header>\r\n          <nav className=\"top-nav-full\">\r\n            <div className=\"navbar-nav mr-auto\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                {\" \"}\r\n                Home{\" \"}\r\n              </Link>\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                About\r\n              </Link>\r\n            </div>\r\n          </nav> \r\n        </header>\r\n\r\n        <body className=\"flex-container\">\r\n          <Switch>\r\n            <Route exact path={'/'} component={Home} />\r\n            <Route path={'/about'} component={About} />\r\n          </Switch>\r\n        </body>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}